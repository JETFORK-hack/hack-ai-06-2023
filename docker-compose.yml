version: "3.9"

services:
  postgres:
    image: postgres:12
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: pg_isready -U postgres
      interval: 3s
      timeout: 2s
      retries: 3
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./app-db-data:/var/lib/postgresql/data:cached

  backend:
    build:
      context: ./backend
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      MINIO_ACCESS_KEY: "occTeNWx8MRzL1cUhWE1"
      MINIO_SECRET_KEY: "hMF5jcgl1iC2gIaLE4bc5uqYcM2h9YEXmnMlHpjD"
    env_file:
      - .env
    volumes:
      - ./app-minio-data:/data
    command: server /data --console-address ":9090"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 3s
      timeout: 2s
      retries: 3

  redis:
    image: 'redis:6.0-alpine'
    ports:
      - 6379:6379

  worker:
    build:
      context: backend
    command: celery --app app.celery_app worker --loglevel=info
    env_file: .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app:delegated
    depends_on:
      - postgres
      - redis
      - minio

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/app:delegated
    environment:
      - NODE_ENV=production

volumes:
  app-db-data:
  root-home:
